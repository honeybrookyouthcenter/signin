variables:
  solution: 'YouthCenterSignIn.sln'

trigger:
  branches:
    include:
    - '*'  

stages:
  - stage: UnitTests
    displayName: 'Run unit tests'
    jobs:
    - job: UnitTestsJob
      pool:
        vmImage: 'windows-latest'

      steps:
      - task: DotNetCoreCLI@2
        displayName: 'Build unit tests'
        inputs:
          command: 'build'
          projects: 'YouthCenterSignIn.Logic.Tests/YouthCenterSignIn.Logic.Tests.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Run unit tests'
        inputs:
          command: 'test'
          projects: 'YouthCenterSignIn.Logic.Tests/YouthCenterSignIn.Logic.Tests.csproj'


  - stage: ReleaseBuild
    displayName: 'Release build'
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    jobs:
    - job: ReleaseBuildJob
      pool:
        vmImage: 'windows-latest'

      steps:
      - task: NuGetToolInstaller@1
      - task: NuGetCommand@2
        inputs:
          command: 'restore'
          restoreSolution: '$(solution)'

      - powershell: |
          $projectfolder = "$(Build.SourcesDirectory)\YouthCenterSignIn"
          $buildId= "$(Build.BuildId)"
          
          $manifestfile = Get-Item -Path "$projectFolder\Package.appxmanifest"
            
          $manifestXml = New-Object -TypeName System.Xml.XmlDocument
          $manifestXml.Load($manifestfile.Fullname)
          
          $currentVersion = [Version]$manifestXml.Package.Identity.Version
          $updatedVersion = [Version]($currentVersion.Major.ToString() + '.' + $currentVersion.Minor + '.' + $buildId + '.' + '0')
          
          $manifestXml.Package.Identity.Version = [String]$updatedVersion
          $manifestXml.save($manifestfile.FullName)
        displayName: 'Update version'

      - task: VSBuild@1
        displayName: 'Release build'
        inputs:
          solution: $(solution)
          platform: x86
          configuration: 'Release'
          msbuildArgs: '/p:AppxBundlePlatforms="x86" /p:AppxPackageDir="$(Pipeline.Workspace)/AppxPackages/" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload -v:quiet'
      - publish: $(Pipeline.Workspace)/AppxPackages
        artifact: package
        displayName: 'Publish package'

  - stage: Deploy
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    jobs:
    - job: DeployJob
      pool:
        vmImage: 'windows-latest'
      steps:
      - download: current
        displayName: 'Download package'
        artifact: package
      - task: store-publish@0
        displayName: 'Publish to store'
        inputs:
          serviceEndpoint: 'James Esh Dev Center'
          appId: '9N3VPVF4F0L4'
          packagePath: '$(Pipeline.Workspace)/package/YouthCenterSignIn_*_bundle.appxupload'
          force: false
          skipPolling: false
          deletePackages: true
          numberOfPackagesToKeep: '1'


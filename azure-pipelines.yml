trigger:
  branches:
    include:
    - '*'  

variables: 
- name: versionMajor
  value: 1
- name: versionMinor
  value: 1
- name: versionPatch
  value: $[ counter(format('{0}.{1}', variables.versionMajor, variables.versionMinor), 0) ]

- name: solution
  value: 'YouthCenterSignIn.sln'

name: $(versionMajor).$(versionMinor).$(versionPatch)

stages:
- stage: UnitTests
  displayName: 'Run unit tests'
  jobs:
  - job: UnitTests
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Build unit tests'
      inputs:
        command: 'build'
        projects: 'YouthCenterSignIn.Logic.Tests/YouthCenterSignIn.Logic.Tests.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: 'test'
        projects: 'YouthCenterSignIn.Logic.Tests/YouthCenterSignIn.Logic.Tests.csproj'

- stage: ReleaseBuild
  displayName: 'Release build'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - job: ReleaseBuild
    steps:
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'
    - powershell: |
        $projectfolder = "$(Build.SourcesDirectory)\YouthCenterSignIn"
        $buildId= "$(Build.BuildId)"
        
        $manifestfile = Get-Item -Path "$projectFolder\Package.appxmanifest"
          
        $manifestXml = New-Object -TypeName System.Xml.XmlDocument
        $manifestXml.Load($manifestfile.Fullname)
        
        $updatedVersion = [Version]($(Build.BuildNumber) + '.0')
        
        $manifestXml.Package.Identity.Version = [String]$updatedVersion
        $manifestXml.save($manifestfile.FullName)
      displayName: 'Update version'
    - task: VSBuild@1
      displayName: 'Release build'
      inputs:
        solution: $(solution)
        platform: x86
        configuration: 'Release'
        msbuildArgs: '/p:AppxBundlePlatforms="x86" /p:AppxPackageDir="$(Pipeline.Workspace)/AppxPackages/" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload -v:quiet'
    - publish: $(Pipeline.Workspace)/AppxPackages
      artifact: package
      displayName: 'Publish package'
- stage: Deploy
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: Deploy
    environment: 'Store'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: 'Download package'
            artifact: package
          - task: store-publish@0
            inputs:
              serviceEndpoint: 'James Esh Dev Center'
              appId: '9N3VPVF4F0L4'
              packagePath: '$(Pipeline.Workspace)/package/YouthCenterSignIn_*_bundle.appxupload'
              force: false
              skipPolling: true
              deletePackages: true
              numberOfPackagesToKeep: '1'